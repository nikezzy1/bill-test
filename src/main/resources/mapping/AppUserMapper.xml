<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lingsi.unp.mapper.auth.AppUserMapper" >
  <resultMap id="BaseResultMap" type="com.lingsi.unp.model.auth.AppUser" >
    <id column="userid" property="userid" jdbcType="VARCHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="enabled" property="enabled" jdbcType="BIT" />
    <result column="accountNonLocked" property="accountNonLocked" jdbcType="BIT" />
  </resultMap>

  <resultMap id="lazyLoadRoles" type="com.lingsi.unp.model.auth.AppUser" extends="BaseResultMap">
    <collection property="roles" ofType="com.lingsi.unp.model.auth.AppRole" select="com.lingsi.unp.mapper.auth.AppUserMapper.selectAppRoleListById"
                column="{userid=userid}" ></collection>
  </resultMap>

  <sql id="Base_Column_List" >
    userid, username, password, enabled,accountNonLocked
  </sql>

  <select id="selectAppRoleListById" resultType="com.lingsi.unp.model.auth.AppRole">
    SELECT r.* FROM app_role_user ru,app_role r where  ru.roleid=r.roleid AND ru.userid=#{userid}
  </select>

  <select id="selectByPrimaryKey" resultMap="lazyLoadRoles"   >
    select 
    <include refid="Base_Column_List" />
    from app_user
    where userid = #{userid,jdbcType=VARCHAR}
  </select>

  <select id="getAll" resultMap="lazyLoadRoles" >
    select
    <include refid="Base_Column_List" />
    from app_user
  </select>

  <delete id="deleteByPrimaryKey" parameterType="String" >
    delete from app_user
    where userid = #{userid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.lingsi.unp.model.auth.AppUser" >
    insert into app_user (userid, username,
      password, enabled,accountNonLocked)
    values (#{userid,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR},
      #{password,jdbcType=VARCHAR}, #{enabled,jdbcType=BIT}, #{accountNonLocked,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.lingsi.unp.model.auth.AppUser" >
    insert into app_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        userid,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="enabled != null" >
        enabled,
      </if>
      <if test="accountNonLocked != null" >
        accountNonLocked,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userid != null" >
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null" >
        #{enabled,jdbcType=BIT},
      </if>
      <if test="accountNonLocked != null" >
        #{accountNonLocked,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lingsi.unp.model.auth.AppUser" >
    update app_user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR}
      </if>
      <if test="password != null" >
        ,password = #{password,jdbcType=VARCHAR}
      </if>
      <if test="enabled != null" >
        ,enabled = #{enabled,jdbcType=BIT}
      </if>
      <if test="accountNonLocked != null" >
        ,accountNonLocked = #{accountNonLocked,jdbcType=BIT}
      </if>
    </set>
    where userid = #{userid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lingsi.unp.model.auth.AppUser" >
    update app_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      enabled = #{enabled,jdbcType=BIT},
      accountNonLocked = #{accountNonLocked,jdbcType=BIT}
    where userid = #{userid,jdbcType=VARCHAR}
  </update>
</mapper>